/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class App extends javax.swing.JFrame {

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        this.setTitle("NLIDB");
        //populateTable();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldQuery = new javax.swing.JTextField();
        jBtnSubmit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("NLIDB");

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 2, true));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Query");

        jTextFieldQuery.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N

        jBtnSubmit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jBtnSubmit.setText("Submit");
        jBtnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldQuery, javax.swing.GroupLayout.DEFAULT_SIZE, 734, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("System: NLIDB v1.0");

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "FIRSTNAME", "LASTNAME", "GENDER", "DEPARTMENT", "SALARY"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Result");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(435, 435, 435)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(390, 390, 390)
                                .addComponent(jLabel2))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBtnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSubmitActionPerformed
        // TODO add your handling code here:
        String q = this.jTextFieldQuery.getText();
        try
        {
            if(q.isEmpty())
            {
                JOptionPane.showMessageDialog(null, "Please enter a query", "Error", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
                this.reset();
                //Tokenize query
                ArrayList<String> tokens =  QueryTokenizer.Tokenize(q);

                //Remove stopwords
                ArrayList<String> tokenized = StopwordRemover.removeStopWords(tokens);
                System.out.println(tokenized.toString());

                //Pos tagging and Lemmatization of tokens
                ArrayList<String> lemmatizedTokens = Pos.Tag(tokenized);

                //Determine columns
                String queryColumns = QueryFormation.determineColumns(lemmatizedTokens);

                //Determine Where clause
                String queryWhere = QueryFormation.completeQuery(queryColumns);
                System.out.println(queryWhere);

                //Execute Query
                excecuteQuery(queryWhere);
            }
            //reset table

        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jBtnSubmitActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnSubmit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextFieldQuery;
    // End of variables declaration//GEN-END:variables

   public void reset()
   {
       DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
       QueryTokenizer.resetTokenList();
       QueryFormation.restAttributeList();
       Pos.resetLemmatizedTokenList();
       model.setRowCount(0);
   }
   
    
   public void excecuteQuery(String query)
   {
       try
       {
           Connection conn = Connectiondb.connect();
           Statement st = conn.createStatement();
           ResultSet rs = null;
           rs=st.executeQuery(query);
           int count = 0;
           DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
           Object[] rowData = new Object[6];
           
           //remove duplicate attributes
           for(int i = 0; i<QueryFormation.attributeList.size(); i++)
           {
               if(QueryFormation.attributeList.get(i).getName().equalsIgnoreCase("department"))
               {
                   count++;
                   if(count > 1)
                   {
                       QueryFormation.attributeList.remove(i);
                        break;
                   }
               }
           }
           
           while(rs.next())
           { 
               for(int i = 0; i<QueryFormation.attributeList.size(); i++)
               {
                   try
                   {
                       if(QueryFormation.attributeList.get(i).getName().equalsIgnoreCase("id"))
                       {
                           //System.out.println(rs.getString("id"));
                           rowData[0] = rs.getString("id");
                       }
                       else if(QueryFormation.attributeList.get(i).getName().equalsIgnoreCase("firstname"))
                       {
                           //System.out.println(rs.getString("firstname"));
                           rowData[1] = rs.getString("firstname");
                       }
                       else if(QueryFormation.attributeList.get(i).getName().equalsIgnoreCase("lastname"))
                       {
                           //System.out.println(rs.getString("lastname"));
                           rowData[2] = rs.getString("lastname");
                       }
                       else if(QueryFormation.attributeList.get(i).getName().equalsIgnoreCase("gender"))
                       {
                           //System.out.println(rs.getString("gender"));
                           rowData[3] = rs.getString("gender");
                       }
                       else if(QueryFormation.attributeList.get(i).getName().equalsIgnoreCase("department"))
                       {
                           //System.out.println(rs.getString("department"));
                           rowData[4] = rs.getString("department");
                       }
                       else if(QueryFormation.attributeList.get(i).getName().equalsIgnoreCase("salary"))
                       {
                           //System.out.println("£"+rs.getString("salary"));
                           rowData[5] = rs.getString("salary");
                       }
                   }
                   catch(Exception e)
                    {
                        System.out.println(e.getMessage());
                    }
               }
                model.addRow(rowData);
           }
           
       }
       catch(Exception e)
       {
           
       }
   }
}
